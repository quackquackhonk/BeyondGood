*** CHANGELOG ********************************************************************************
  Additional Interfaces:
    - ControllerFeatures: Interface containing all the methods desired by a Controller to facilitate
                          changes to the IView and IWorksheetModel.

    - MouseRunnable: Interface to store methods to run based on specific mouse inputs.
    - SpreadsheetController: Interface for Controllers that work with IWorkSheetModels. Simple
                             interface just for adding an IView to dispaly the model.


  Additional Classes:

	SpreadsheetGUIViewEditable:
  	- GUI view for spreadsheets that has basic functionality for Controllers to use to make visual changes.
  	- SpreadsheetScrollingPanel is reused to visualize the spreadsheets.
  	- Additional methods that facilitate visual changes such as highlighting cells were added to the
  	  IView interface.
  	- Controllers can pass this view "Feature" callbacks that facilitate communication between this view,
  	  the Controller, and the model
  	- "Feature" callbacks also set visual changes, such as highlighting cells.
  	- There are two additional buttons to confirm or cancel the current input in the main textfield.
  	  Confirming changes uses callbacks provided by the Controller to create a new cell in the model.
  	  Cancelling resets the text input.
  	- Additional buttons/text inputs for adding rows and columns are also implemented through "Feature" callbacks.

  SpreadsheetMVCController:
    - Controller class to facilitate communication between IWorkSheetModels and IViews.
    - Communication is required, for example, to grab user inputted text from the view and passing
      it to the model for an action.
    - Is a "Feature", so passes itself to its IView to facilitate callback functionality
    - Because it is a "Feature", it has no explicit knowledge of KeyEvents or Swing.

  Mouse/Keyboard/ButtonListeners:
    - Simple classes that setup Action/ButtonMaps for callbacks


  ****** Changes to existing classes *******************************************************
  - IView: Set/Get methods for IViews.
           ex: Getting text from a textfield
           ex: Setting currently highlighted cell
           ex: Adding additional blank rows/columns to display, independently of the model


*** VIEW ************************************************************************************

-------- Interfaces --------------------------------
IView
	- Interface for view implementations of IWorkSheetModels.
	- Has methods to set command callbacks / error messages for future controller implementations.

------ Classes -------------------------------------
SpreadsheetGUIView:
	- GUI view for spreadsheets. Has some stub methods for controllers to use.
	- Displays all cells as evaluated strings, cells that are in cycles or malformed formulas are displayed
	  as String errors in their corresponding cells.
	- Has sticky column and row headers that scroll horizontally/vertically with the grid.
	- Resizes grid, scrollbars, and viewport if window is maximized.

SpreadsheetScrollingPanel
	- JPanel that contains a static JPanel that draws the grid, vertical/horizontal JScrollBars, and a JPanel viewport
	- The viewport pans across the static JPanel using the AdjustmentListeners attached to each scrollbar.
	- Resizes the grid as needed based on window size.

ScrollingViewPort
    - Viewport for the grid. Changes the bounds and size of the grid JPanel based on scroll events and window events.

SpreadsheetScrollingColumnHeader
    - Column header for spreadsheets. Stays stickied at the top, but scrolls horizontally.

SpreadsheetScrollingRowHeader
    - Row head for spreadsheets. Stays stickied at the left, but scrolls vertically.

SpreadsheetTextualView
    - Saves the input spreadsheet file in text form.
    - Incorrect cells are still saved for future use.
    - Previously saved files can be opened and resaved.

GridPanel
    - Draws the grid and text of the spreadsheet. Only draws cells within the bounds of the viewport.

*** MODEL ****************************************************************************************

-- Changelog --------------------------------------
- GUI view needs to get and display invalid (cycle / formula issues) cells, so added a method
  that checks for cycles/formula issues, and returns the String result or throws an error.
  The previous method didn't allow for evaluations if any cells in the model had errors.

- Added additional cell getter method that takes in integers instead of a Coord for convenience.s


---------- Interfaces ------------------------
IWorkSheetModel:
	- This interface is parameterized by the user's implementation of "cell contents". Therefore future models that
	  represent their cells differently should work.

	- Contains all methods that should work on any representation of a spreadsheet.

CellContents:
	- Classes that implement this interface represent possible types of cells.
	- Includes implementations for cells that hold Strings, Doubles, Booleans, Formulas, and rectangular regions of other cells.

IEvalVisitor:
	- Interface to handle evaluation of every type of CellContents.  
	  Needed to call CellContents specific methods.

	- All methods return a Value class (Str, Dbl, Bool), as these are what ALL cells must evaluate too.
		- All formulas eventually return either a String, Double, or Boolean.
		- Returns Value so other methods can store method result without knowing end type.

Value: 
	- Exists to contain base types of CellContents: Strs, Dbls, and Bools.


-------- Abstract Classes --------------------------
Ops:
	- Cells that are Formulas implement the abstract class Ops.
	- Abstracted because all Formulas are constructed with a list of CellContents.
	- getRaw() method is also the same for Ops.
	- All classes that implemetn Ops throw an exception if the types of their arguments are incorrect.



------- Classes --------------------------------------
Bool imp Value: 
	- A CellContents to represent booleans.

Dlb imp Value: 
	- A CellContents to represent doubles.

Str imp Value: 
	- A CellContents to represent Strings.

ReferenceCell imp CellContents:
	- A CellContents to represent a rectangular region of cells.
	- Stores the referenced cells as Coords.

SUM imp Ops:
	- Represents a cell that computes the sum of other CellContents.
	- Holds the CellContents it intends to sum as a field.

PRODUCT imp Ops:
	- Represents a cell that computes the product of other CellContents.
	- Holds the CellContents it intends to multiply as a field.

LESSTHAN imp Ops:
	- Represents a cell that computes if its first number is less than its second.
	- Holds the CellContents it intends to compare as a field.

GREATERTHAN imp Ops:
	- Represents a cell that computes if its first number is greater than its second.
	- Holds the CellContents it intends to compare as a field.

WorkSheetModel imp IWorkSheetModel:
	- The spreadsheet model class. 
	- Supports cells that store values, as well as cells that are formulas
	- Cells can be created as well as updated
	- Cells can be evaluated

WorkSheetModel.SheetBuilder imp WorkSheetBuilder:
	- A builder class for WorkSheetModel
	- Handles creation of initial cells
	- Checks that cells don't create cycles and can be evaluated

SexpVisitParser imp SexpVisitor:
	- Visitor to create corresponding CellContent from SExpressions
	- Assumes "=" has been caught. CellContents could be a ReferenceCell or Ops.

SexpVisitParserSymbol:
	- Visitor to create corresponding CellContent from SExpressions
	- Assumes "=" hasn't been caught. The only valid SSymbols are ReferenceCells.

SexpVisitParserListOne:
	- Visitor to create corresponding CellContent from SExpressions
	- Collapses single length lists to one CellContent