Provider Experience:

The initial email provided all the code that was required and we did have to ask them to make any changes to their code. We emailed the providers several times inquiring about their 
implementation, and their responses were quick and informative. Unfortunately, the package they provided to us did not contain a screenshot of their UI or the short readme that was required, 
and had they included we might not have needed to email them.  However, as stated earlier their reponses were quick and informative, so this was not a significant roadblock.

Thoughts on our design / their design:

We did not have to make updates to our code for our customers. We put a decent amount of time into the customer readmes, and the work seems to have paid off.  

Their view had an entirely different design than hours. Our MVC design encapsulated all event handling within the view, and used a Features interface to call high level Controller methods
to facilitate communication between model and view. Our model and view were completely decoupled.  However, their view stored a view-only model as a field and called methods on the model to 
get data. This was another design choice we had not considered, and as the view still could not mutate the model and their controller did not import SWING, their design seemed to be relatively 
decoupled as well. However, because the designs were so different, our adapter classes for cells, model, and controller were perhaps more lengthy than they would've been if their design was decoupled in 
the same way ours was.  For example, their cell classes could evaluate themselves independently of the model, implying the cells stored other actual cells.  We believed this information was not appropriate 
for cells to have, with our cells being capable of referencing, but not wholly evaluating other cells. Due to this difference, we needed to make a cell adapter class. This preserved our design, which we preferred,
but for the functionality required by their implementation. We were happy with this.

Overall, our adapters preserved all functionality and were not overlly lengthy. We believe in the design of our model, and because our adapter classes weren't too complex, we believe our design was
sufficiently flexable.

In terms of what we learned, their view's implementation of infinite scrolling was quite clever, and we hadn't thought of that solution before.

